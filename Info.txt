Functions:

!	= pop a,     push factorial(a)
"	= start/end string literal
#	= pop a      if true: break/end (used in infinite loops)
$	=            push 1 and input (used for sequences)
%	= pop a,b    push (a % b)
&	= pop a,b    push a AND b
'	=            push char ( 'a pushes "a" )
(	= pop a      push -a
)	=            wrap total stack to an array
*	= pop a,b    push (a * b)
+	= pop a,b    push (a + b)
,	= pop a      print(a)
-	= pop a,b    push (a - b) or if a or b is not a decimal, push a.remove(all chars of b)
.	= two char functions
/	= pop a,b    push (a / b)
0	= numeric literal
1	= numeric literal
2	= numeric literal
3	= numeric literal
4	= numeric literal
5	= numeric literal
6	= numeric literal
7	= numeric literal
8	= numeric literal
9	= numeric literal
:	= pop a,b,c  a.replace(b, c) / infinite replacement
;	= pop a      push a / 2
<	= pop a      push a - 1
=	=            print last item
>	= pop a      push a + 1
?	= pop a      print a no newline
@	= pop a      push stack(a)
A	=            push 'abcdefghijklmnopqrstuvwxyz'
B	= pop a,b    push base(a, b)
C	= pop a      push int(a, 2)
D	= pop a      push a, a
E	=            push eval(input())
F	= pop a      for N in range(0, a) { }: F(commands)} / N = variable
G	= pop a      for N in range(1, a) { }: F(commands)} / N = variable
H	= pop a      push int(a, 16)
I	=            push input()
J	= pop a      push ''.join(a) if a is list / if not, then push ''.join(stack)
K	= pop a,b    push a with no b's
L	= pop a      push [1 .. a]
M	=            push the largest number in the stack
N	=            reserved for variables
O	= pop a      push total sum (only on lists)
P	= pop a      push total product (only on lists)
Q	= pop a,b    push a == b (bool)
R	= pop a      push reversed(a)
S	= pop a      push all chars a seperate
T	=            push 10
U	= pop a      assign X to a
V	= pop a      assign Y to a
W	= pop a      assign Z to input and pushes input
X	=            integer variable
Y	=            integer variable
Z	=            integer variable
[	=            infinite loop start
\	=            delete last item
]	=            infinite loop end
^	= pop a,b    push a XOR b
_	= pop a      push negative bool
`	= pop a      push flattend a
a	= pop a      push is_alpha(a)
b	= pop a      push bin(a)
c	= pop a,b    push a nCr b
d	= pop a      push is_number(a)
e	= pop a,b    push a nPr b
f	= pop a      push list of prime factors (no duplicates)
g	= pop a      push length of a
h	= pop a      push hex(a)
i	= pop a      if statement: iTHEN}: if true { then }
j	= pop a      max_a_spaces.join(stack)
k	= pop a,b    push 1-indexed index of b in a (-1 when not found)
l	= pop a      push lower_case(a)
m	= pop a,b    push a**b
n	= pop a      push a**2
o	= pop a      push 2**a
p	= pop a      push isPrime(a)
q	=            terminates the program
r	=            reverse stack
s	= pop a,b    push b,a
t	= pop a      push sqrt(a)
u	= pop a      push upper_case(a)
v	= pop a      range loop: for y in a (y = string, N = index)
w	=            wait one second
x	= pop a      push a, a * 2
y	=            push string variable (used in mapping loops)
z	= pop a      push 1 / a
{	= pop a      push sorted a
|	= print full stack
}	=            used for if statements
~	= pop a,b    push a OR b

Extended ASCII characters (CP-1252)

€ 0     = else statement
‚ 1	=
ƒ 2	= pop a      push for N in range(0, a + 1)
„ 3	=
… 4	=
† 5	= pop a,b    push a with b filtered to the front
‡ 6	=
ˆ 7	=
‰ 8	= 
Š 9	= pop a,b,c  push c,a,b
‹ 10	= pop a,b    push a < b
Œ 11	=
Ž 12	= break if stack is empty
‘ -	= for compressed strings (upper)
’ - 	= for compressed strings (no implicit space)
“ -	= for compressed strings (normal)
” -	= for compressed strings (title)
• 15	=
– 16	=
— 17	=
˜   	=
™ 19	= pop a      push title_cased(a)
š 20	= pop a      push switch_cased(a)
› 21	= pop a,b    push a > b
œ 22	=
ž 23	=
Ÿ 24	= pop a,b    push [a, ..., b]
¡ 25	= pop a,b    push a.split(b)  
¢ 26	= pop a,b    push a.count(b)
£ 27	= pop a,b    push a[0:b]
¤ 28	=
¥ 29	=
¦ 30	=
§ 31	= pop a      push str(a)
¨ 32	=
© 33	=
ª 34	= pop a      push sentence_cased(a)
« 35	= pop a,b    push concatenated(a, b)
¬ 36	= pop a      push head(a)
® 37	=
¯ 38	=
° 39	= pop a      push 10 ** a
± 40	=
² 41	=            push the second item from the input history
³ 42	=            push the third item from the input history
´ 43	=
µ 44	=
¶ 45	=
· 46	=
¸ 47	=
¹ 48	=            push the first item from the input history
º 49	=
» 50	=
¼ 51	=
½ 52	=
¾ 53	=
¿ 54	=
À 55	=
Á 56	=
Â 57	=
Ã 58	=
Ä 59	= pop a      push abs(a)
Å 60	=
Æ 61	= pop a      push reduced a
Ç 62	= pop a      push ASCII value of a
È 63	= pop a      push a % 2 == 0 (is even)
É 64	= pop a      push a % 2 == 1 (is uneven)
Ê 65	=
Ë 66	=
Ì 67	= pop a      push a + 2
Í 68	= pop a      push a - 2
Î 69	=
Ï 70	= 
Ð 71	= triplicate top of stack (pop a, push a, push a, push a)
Ñ 72	=
Ò 73	=
Ó 74	=
Ô 75	=
Õ 76	=
Ö 77	= pop a,b    push a % b == 0
× 78	=
Ø 79	= pop a      push ath prime (zero-indexed)
Ù 80	= pop a      push uniquified a
Ú 81	= pop a      push reverse uniquified a
Û 82	= pop a,b    push a with leading b's trimmed off
Ü 83	= pop a,b    push a with trailing b's trimmed off
Ý 84	= pop a,b    push [a, ..., b - 1]
Þ 85	= pop a      push float(a)
ß 86	= pop smallest element of list
à 87	= pop greatest element of list
á 88	=
â 89	=
ã 90	=
ä 91	=
å 92	=
æ 93	=
ç 94	= pop a      push char a
è 95	=
é 96	=
ê 97    =
ë 98	=
ì 99	=
í 13	=
î 14	=
ï 18	= pop a      push int(a)
ð	=            push a space character
ñ	=
ò	= pop a      push inclusive round up a
ó	= pop a      push inclusive round down a
ô	=
õ	=
ö	=
÷	= pop a,b    push a split in pieces of b
ø	=
ù	=
ú	= 
û	=
ü	=
ý	=
þ	=
ÿ	= used for string interpolation, pop a and replace ÿ with str(a)


Extended functions:

.a      = pop a      push only letters of a
.d      = pop a      push only digits of a
.e      = experimental python evaluation (does not work in safe mode)
.f      = pop a      push list of prime factors (with duplicates)
.j	= pop a      0-indexed max_spaces.join(stack) grid
.J      = pop a      1-indexed max_spaces.join(stack) grid
.l      = pop a      push is_lower(a)
.p      = pop a      push list of exponents of prime factors (2^a, 3^b, 5^c, 7^d, etc.)
.u      = pop a      push is_upper(a)