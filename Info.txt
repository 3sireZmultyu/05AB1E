Functions:

!	= pop a,     push factorial(a)
"	= start/end string literal
#	= pop a      if true: break/end (used in infinite loops)
$	=            push 1 and input (used for sequences)
%	= pop a,b    push (a % b)
&	= pop a,b    push a AND b
'	=            push char ( 'a pushes "a" )
(	= pop a      push -a
)	=            wrap total stack to an array
*	= pop a,b    push (a * b)
+	= pop a,b    push (a + b)
,	= pop a      print(a)
-	= pop a,b    push (a - b) or if a or b is not a decimal, push a.remove(all chars of b)
.	= two char functions
/	= pop a,b    push (a / b) floored division
0	= numeric literal
1	= numeric literal
2	= numeric literal
3	= numeric literal
4	= numeric literal
5	= numeric literal
6	= numeric literal
7	= numeric literal
8	= numeric literal
9	= numeric literal
:	= pop a,b,c  a.replace(b, c) / infinite replacement
;	= pop a      push a / 2
<	= pop a      push a - 1
=	=            print last item
>	= pop a      push a + 1
?	= pop a      print a no newline
@	= pop a      push stack(a)
A	=            push 'abcdefghijklmnopqrstuvwxyz'
B	= pop a,b    push base(a, b)
C	= pop a      push int(a, 2)
D	= pop a      push a, a
E	=            push eval(input())
F	= pop a      for N in range(0, a) { }: F(commands)} / N = variable
G	= pop a      for N in range(1, a) { }: F(commands)} / N = variable
H	= pop a      push int(a, 16)
I	=            push input()
J	= pop a      push ''.join(a) if a is list / if not, then push ''.join(stack)
K	=
L	= pop a      push [1 .. a]
M	=            push the largest number in the stack
N	=            reserved for variables
O	= pop a      push total sum (only on lists)
P	= pop a      push total product (only on lists)
Q	= pop a,b    push a == b (bool)
R	= pop a      push reversed(a)
S	= pop a      push all chars a seperate
T	=            push 10
U	= pop a      assign X to a
V	= pop a      assign Y to a
W	= pop a      assign Z to input and pushes input
X	=            integer variable
Y	=            integer variable
Z	=            integer variable
[	=            infinite loop start
\	=            delete last item
]	=            infinite loop end
^	= pop a,b    push a XOR b
_	= pop a      push negative bool
`	= pop a      push flattend a
a	= pop a      push is_alpha(a)
b	= pop a      push bin(a)
c	= pop a,b    push a nCr b
d	= pop a      push is_number(a)
e	= pop a,b    push a nPr b
f	= pop a      push list of prime factors (no duplicates)
g	= pop a      push length of a
h	= pop a      push hex(a)
i	= pop a      if statement: iTHEN}: if true { then }
j	= pop a      max_a_spaces.join(stack)
k	= pop a,b    push 1-indexed index of b in a (-1 when not found)
l	= pop a      push lower_case(a)
m	= pop a,b    push a**b
n	= pop a      push a**2
o	= pop a      push 2**a
p	= pop a      push isPrime(a)
q	=            terminates the program
r	=            reverse stack
s	= pop a,b    push b,a
t	= pop a      push sqrt(a)
u	= pop a      push upper_case(a)
v	= pop a      range loop: for y in a (y = string, N = index)
w	=            wait one second
x	= pop a      push a, a * 2
y	=            push string variable (used in mapping loops)
z	= pop a      push 1 / a
{	= pop a      push sorted a
|	= print full stack
}	=            used for if statements
~	= pop a,b    push a OR b

Extended functions:

.a      = pop a      push only letters of a
.c      = pop a      push char a
.C      = pop a      push ASCII value of a
.d      = pop a      push only digits of a
.f      = pop a      push list of prime factors (with duplicates)
.j	= pop a      0-indexed max_spaces.join(stack) grid
.J      = pop a      1-indexed max_spaces.join(stack) grid
.l      = pop a      push is_lower(a)
.p      = pop a      push list of exponents of prime factors (2^a, 3^b, 5^c, 7^d, etc.)
.T      = pop a      push 10 ** a
.u      = pop a      push is_upper(a)